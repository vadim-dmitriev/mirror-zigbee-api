// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.6.1
// source: zigbee-service/zigbee-service.proto

package zigbee_service_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ZigbeeServiceClient is the client API for ZigbeeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZigbeeServiceClient interface {
	GetDevices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetDevicesResponse, error)
	SetDeviceStatus(ctx context.Context, in *SetDeviceStatusRequest, opts ...grpc.CallOption) (*Empty, error)
}

type zigbeeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewZigbeeServiceClient(cc grpc.ClientConnInterface) ZigbeeServiceClient {
	return &zigbeeServiceClient{cc}
}

func (c *zigbeeServiceClient) GetDevices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetDevicesResponse, error) {
	out := new(GetDevicesResponse)
	err := c.cc.Invoke(ctx, "/zigbee_service.ZigbeeService/GetDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zigbeeServiceClient) SetDeviceStatus(ctx context.Context, in *SetDeviceStatusRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/zigbee_service.ZigbeeService/SetDeviceStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZigbeeServiceServer is the server API for ZigbeeService service.
// All implementations must embed UnimplementedZigbeeServiceServer
// for forward compatibility
type ZigbeeServiceServer interface {
	GetDevices(context.Context, *Empty) (*GetDevicesResponse, error)
	SetDeviceStatus(context.Context, *SetDeviceStatusRequest) (*Empty, error)
	mustEmbedUnimplementedZigbeeServiceServer()
}

// UnimplementedZigbeeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedZigbeeServiceServer struct {
}

func (UnimplementedZigbeeServiceServer) GetDevices(context.Context, *Empty) (*GetDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevices not implemented")
}
func (UnimplementedZigbeeServiceServer) SetDeviceStatus(context.Context, *SetDeviceStatusRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDeviceStatus not implemented")
}
func (UnimplementedZigbeeServiceServer) mustEmbedUnimplementedZigbeeServiceServer() {}

// UnsafeZigbeeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZigbeeServiceServer will
// result in compilation errors.
type UnsafeZigbeeServiceServer interface {
	mustEmbedUnimplementedZigbeeServiceServer()
}

func RegisterZigbeeServiceServer(s grpc.ServiceRegistrar, srv ZigbeeServiceServer) {
	s.RegisterService(&ZigbeeService_ServiceDesc, srv)
}

func _ZigbeeService_GetDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZigbeeServiceServer).GetDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbee_service.ZigbeeService/GetDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZigbeeServiceServer).GetDevices(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZigbeeService_SetDeviceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDeviceStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZigbeeServiceServer).SetDeviceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbee_service.ZigbeeService/SetDeviceStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZigbeeServiceServer).SetDeviceStatus(ctx, req.(*SetDeviceStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ZigbeeService_ServiceDesc is the grpc.ServiceDesc for ZigbeeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ZigbeeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zigbee_service.ZigbeeService",
	HandlerType: (*ZigbeeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDevices",
			Handler:    _ZigbeeService_GetDevices_Handler,
		},
		{
			MethodName: "SetDeviceStatus",
			Handler:    _ZigbeeService_SetDeviceStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zigbee-service/zigbee-service.proto",
}
